<?php

namespace App\Http\Controllers;
Use App\Models\Plan;
use Cartalyst\Stripe\Stripe;
use Illuminate\Http\Request;
use Zendesk;

class Plans extends Controller
{

    public function setutc(Request $request){

    }

    public function addTicket(Request $request) {

        // Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/
        $unique_id = uniqid();
        $content = json_encode(['ticket'=>['subject' => 'Help Ticket',
          'comment' => [
              'body' => $request->description,
              'first_name' => $request->first_name,
              'email' => $request->email,
              'mobile' => $request->mobile,
              'frequency' => $request->frequency,
              'mobile' => $request->description,
          ],
          'requester'=> [
            'locale_id'=> 8,
            "name"=> $request->first_name,
            "email"=> $request->email
        ],

        "custom_fields"=> [
            [
                "id"=> 1260818692670,
                "value"=> $request->email
            ],
            [
                "id"=> 1260818692690,
                "value"=>$request->frequency
            ],
            [
                "id"=> 1260818727709,
                "value"=> $request->mobile
            ],
            [
                "id"=> 1260823588570,
                "value"=> $request->first_name
            ]],

            'priority' => 'normal'
        ]]);

        $ch = curl_init();

        curl_setopt($ch, CURLOPT_URL, 'https://poolservice.zendesk.com/api/v2/tickets.json');
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_POST, 1);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $content);
        curl_setopt($ch, CURLOPT_USERPWD, 'gvelez@poolservice.software/token' . ':' . '8e7V6sjnpcopz5FBH1G8toWs6Upgtu2TB1avOJ1w');

        $headers = array();
        $headers[] = 'Content-Type: application/json';
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

        $result = curl_exec($ch);
        if (curl_errno($ch)) {
            echo 'Error:' . curl_error($ch);
        }
        dd($result);
        curl_close($ch);


    }

    public function CheckCoup(Request $request){
        $stripe  = new Stripe(env('STRIPE_API_KEY'), env('STRIPE_API_VERSION'));
        $coupon = $request->input("coupon");
        //dd($coupon);
        //$stripe->coupons()->find($coupon);
        $coupons = $stripe->coupons()->find($coupon);
        if(!empty($coupons)){

            return array('success'=>1,'percent_off'=>$coupons['percent_off']);
        }
        else
        {
           return array('success'=>0);
       }
   }
   public function checkPlans(Request $request) {
    $plan_per_person = env('Per_Client_Price');
    $package_option = $request->input("package-option");
    $clients = ($package_option)?$package_option:$request->input("clientcount");
    $planname = $request->input("planname");
    $plan_cycle = ($request->input("plan_cycle") == 'month')?1:12;
    $subscriprion_text = ($plan_cycle ==1 )?'Monthly':'Yearly';
    if($planname == 'Standard' || $planname == 'Startup'){
      $plan = Plan::where('plan_name',$planname)->where('cycle',$request->input("plan_cycle"))->first();

      if(!empty($plan)){
        return ['plan_id'=>$plan->plan_id, 'amount'=>$plan->plan_amount,'clients'=>$plan->persons_range_end];
    }
    else{
        $plans_array= [
            [
                'plan_id'=>'startupspecial_dev',
                'plan_amount'=>'49.50',
                'persons_range_start'=>'10',
                'persons_range_end'=>'40',
                'cycle'=>'month',
                'plan_name'=>'Startup',
            ],
            [
                'plan_id'=>'plan_GHTQokGBrtfzdU',
                'plan_amount'=>'356.40',
                'persons_range_start'=>'10',
                'persons_range_end'=>'40',
                'cycle'=>'year',
                'plan_name'=>'Startup',
            ],
            [
                'plan_id'=>'standardyearlyplan',
                'plan_amount'=>'745.20',
                'persons_range_start'=>'40',
                'persons_range_end'=>'300',
                'cycle'=>'year',
                'plan_name'=>'Standard',
            ],
            [
                'plan_id'=>'subscribe69',
                'plan_amount'=>'69.00',
                'persons_range_start'=>'40',
                'persons_range_end'=>'300',
                'cycle'=>'month',
                'plan_name'=>'Standard',
            ],

        ];
        foreach($plans_array as $splans_array){
           $plan = new Plan();
           $plan->plan_id=$splans_array['plan_id'];
           $plan->plan_amount=$splans_array['plan_amount'];
           $plan->persons_range_start=$splans_array['persons_range_start'];
           $plan->persons_range_end=$splans_array['persons_range_end'];
           $plan->cycle=$splans_array['cycle'];
           $plan->plan_name=$splans_array['plan_name'];
           $plan->save();

       }
       $plan = Plan::where('plan_name',$planname)->where('cycle',$request->input("plan_cycle"))->first();

       if(!empty($plan)){
        return ['plan_id'=>$plan->plan_id, 'amount'=>$plan->plan_amount,'clients'=>$plan->persons_range_end];
    }
}
}else{
    $plan = Plan::where('persons_range_start','<=', $clients)->where('persons_range_end','>=',$clients)->where('cycle',$request->input("plan_cycle"))->first();
    if(!empty($plan)){

        $amount = ($plan->persons_range_end*$plan_per_person)*$plan_cycle;

        $camount =   $plan->plan_amount -$amount;
        if($camount < 1){

            return ['plan_id'=>$plan->plan_id,'amount'=>$plan->plan_amount,'clients'=>$plan->persons_range_end];
        }
        else{

            $plan->delete();
            $plan ='';
        }
    }
}




$stripe = new Stripe(env('STRIPE_API_KEY'), env('STRIPE_API_VERSION'));


if(!empty($plan)){
  $plan = $stripe->plans()->find($plan->plan_id);
  if(!empty($plan)){
    echo 'plan exist';
}
else{
    if($clients > 300){
       $ranges = ['301','601','1201','5001'];
       $increments = ['301'=>'25','601'=>'50','1201'=>'100','5001'=>'200'];
       $actual_range = '';
       $start_range = '';
       $end_range = '';
       foreach($ranges as $range){
          if($clients >= $range){
             $actual_range = $range;
         }
     }
     for ($x = $actual_range; $x <= $clients; $x+=$increments[$actual_range]) {
        $start_range = $x;
        $end_range = $x + $increments[$actual_range];
    }
    $end_range = $end_range -1;
    $amount = ($end_range*$plan_per_person)*$plan_cycle;


    $product = $stripe->products()->create([
        'name' => 'Enterprise Plan ('.$end_range. ')',
        'description' =>$subscriprion_text.' Subscription for '.$start_range .' to '.$end_range. ' people',
    ]);
    $new_plan = $stripe->plans()->create([
        'amount' => $amount,
        'currency' => 'usd',
        'interval' => $request->input("plan_cycle"),
        'product' => $product['id'],
    ]);
    $cycle = 'month';
    $plan =new Plan();
    $plan->plan_id = $new_plan['id'];
    $plan->plan_amount = $amount;
    $plan->cycle = $request->input("plan_cycle");
    $plan->persons_range_end = $end_range;
    $plan->persons_range_start = $start_range;

    $plan->save();

    return ['plan_id'=>$new_plan['id'], 'amount'=>$plan->plan_amount,'clients'=>$end_range];

}
}
}else{


  if($clients > 300){
     $ranges = ['301','601','1201','5001'];
     $increments = ['301'=>'25','601'=>'50','1201'=>'100','5001'=>'200'];
     $actual_range = '';
     $start_range = '';
     $end_range = '';
     foreach($ranges as $range){
        if($clients >= $range){
           $actual_range = $range;
       }
   }
   for ($x = $actual_range; $x <= $clients; $x+=$increments[$actual_range]) {
      $start_range = $x;
      $end_range = $x + $increments[$actual_range];
  }
  $end_range = $end_range -1;
  $amount = ($end_range*$plan_per_person)*$plan_cycle;

  $product = $stripe->products()->create([
      'name' => 'Enterprise Plan ('.$end_range. ')',
      'description' =>$subscriprion_text.' Subscription for '.$start_range .' to '.$end_range. ' people',
  ]);
  $new_plan = $stripe->plans()->create([
      'amount' => $amount,
      'currency' => 'usd',
      'interval' => $request->input("plan_cycle"),
      'product' => $product['id'],
  ]);
  $cycle = 'month';
  $plan =new Plan();
  $plan->plan_id = $new_plan['id'];
  $plan->plan_amount = $amount;
  $plan->cycle = $request->input("plan_cycle");
  $plan->persons_range_end = $end_range;
  $plan->persons_range_start = $start_range;

  $plan->save();
  return ['plan_id'=>$new_plan['id'], 'amount'=>$plan->plan_amount,'clients'=>$end_range];
}
}
}
public function makePalns(Request $request){
  $clients = $request->input("clientcount");
  $plan_per_person = env('Per_Client_Price');

  $plan_cycle = ($request->input("plan_cycle") == 'month')?1:12;

  $ranges = ['301','601','1201','5001'];
  $increments = ['301'=>'25','601'=>'50','1201'=>'100','5001'=>'200'];


  foreach($ranges as $key=>$range){
    $output=[];

    if($clients >=$range){
      if($clients >= $ranges[$key+1]){
        continue;
    }
    $counter = 1;
    $customers = '';
    for ($x = $range; $x <= 5000; $x+=$increments[$range]) {
        if($x >=  $clients){
          $customers =$x;
          break;
      }
  }
  $new_customers = $customers;
  $output[]=$customers;
      //$customers=$clients;
  for ($x = 1; $x <= 10; $x++) {
    if($counter > 5){
      if($customers >= $ranges[$key+1]){
        $inner_range = $ranges[$key+1];
        $customers = $customers + $increments[$inner_range];
        $output[] = $customers;
    }else{
        $customers = $customers + $increments[$range];
        $output[] = $customers;
    }
}else{

  $new_key = ($key > 0)?$key-1:$key;

  if($customers >= 350){

    $inner_range = $ranges[$new_key];
    if($customers <= $ranges[$new_key]){

      $customers = $customers - $increments[$inner_range];
      $output[] = $customers;
  }else{
      if($customers <= 601){
        $customers = $customers - $increments[$inner_range];
    }else{
        $customers = $customers - $increments[$range];
    }

    $output[] = $customers;
}
}

if($counter > 4)
    $customers= $new_customers;

}

$counter++;

}
break;
}

}
sort($output);
  //$output = sort($output);
ob_start();
?>
<option value="">Choose One</option>
<?php
$new_customers = $new_customers-1;
foreach  ($output as $soutput){
    $soutput = $soutput-1;


    //dd($output[5]-1 . ','. $new_customers);
    ?>
    <option value="<?php echo $soutput;  ?>" <?php echo ( $new_customers == $soutput)?'selected':''; ?>><?php echo $soutput; ?> Clients $<?php echo number_format((float)$soutput*$plan_per_person*$plan_cycle, 2, '.', ''); ;  ?></option>

    <?php
}
return ob_get_clean();
}
function createTicket(Request $request){
  Zendesk::tickets()->create([
      'subject' => 'Subject',
      'comment' => [
          'body' => 'Ticket content.'
      ],
      'priority' => 'normal'
  ]);
}
}
